Microsoft (R) Macro Assembler Version 14.29.30136.0	    12/03/21 13:49:43
main.asm						     Page 1 - 1


				.386P
				.model flat
				extern _ExitProcess@4: near
				extern _GetStdHandle@4: near
				extern _WriteConsoleA@20: near
				extern _ReadConsoleA@20: near
				;extern _PrintLine
				;extern _WriteLine
				;extern _atoi
				;extern _itoa

 00000000			.data

 00000000 00000000		input1	dword	0
 00000004 00000000		input2	dword	0

 00000008 45 6E 74 65 72	prompt	byte	'Enter number 1: ', 10
	   20 6E 75 6D 62
	   65 72 20 31 3A
	   20 0A
 00000019 45 6E 74 65 72	prompt2	byte	'Enter number 2: ', 10
	   20 6E 75 6D 62
	   65 72 20 32 3A
	   20 0A
 0000002A 54 68 65 20 6D	result	byte	'The multiplication result is: ', 10
	   75 6C 74 69 70
	   6C 69 63 61 74
	   69 6F 6E 20 72
	   65 73 75 6C 74
	   20 69 73 3A 20
	   0A
 00000049  00000400 [		writeBuffer	byte	1024	DUP(00H)
	    00
	   ]

 00000449  00000400 [		readBuffer1	byte		1024	DUP(00H)
	    00
	   ]
 00000849  00000400 [		readBuffer2	byte		1024	DUP(00H)
	    00
	   ]

 00000C49 00000000		handle		dword       ?
 00000C4D 00000000		read		dword		?
 00000C51 00000000		written		dword		?

 00000C55 00000000		readHandle	dword		?	

 00000C59 00000000		accumulator  dword      0

 00000000			.code

 00000000			readLine PROC near

 00000000  55				push	ebp
 00000001  8B EC			mov		ebp,	esp
 00000003  8B 55 08			mov		edx,	[ebp+8]

 00000006  6A F6			push   -10							; passes argument to function, -11 is argument. functions sees -11 and knows you want stdout
 00000008  E8 00000000 E		call   _GetStdHandle@4				; make call to get handle on stdout
 0000000D  A3 00000C55 R		mov	   readHandle, eax				; write handle to a location in memory where it is saved. return value always comes to eax bc youll need it *changed from read
					
					
					;mov    eax, offset readBuffer1		;???

					; ReadConsole(handle, &msg[0], 13, &written, 0)
 00000012  6A 00			push	0							; reserved argument, always needed
 00000014  68 00000C4D R		push	offset read					; reads the number of bytes it wrote, pass a memory address to this
 00000019  68 00000400			push	1024							; the number of bytes youre asking it to read
 0000001E  52				push	edx			; address of where the message is
 0000001F  FF 35 00000C55 R		push	readHandle					; handle of the output from GetStdHandle *changed from read. readHandle is the memory location written to
 00000025  E8 00000000 E		call	_ReadConsoleA@20			; call function
 0000002A  5D				pop		ebp
 0000002B  C2 0004			ret		4

 0000002E			readLine ENDP

 0000002E			writeLine PROC near

 0000002E  55				push	ebp
 0000002F  8B EC			mov		ebp,	esp
 00000031  8B 55 08			mov		edx,	[ebp+8]
 00000034  8B DA			mov		ebx,	edx

 00000036			_Loop:
 00000036  8A 02			mov		al,	[edx]
 00000038  83 C2 01			add		edx,	1
 0000003B  3C 0A			cmp		al,		10
 0000003D  75 F7			jne		_loop
 0000003F  2B D3			sub		edx,	ebx			;edx has count
 00000041  83 EA 01			sub		edx,	1
					; push	eax
					; cmp		writeBuffer,	0
					; jmp		_Loop
					; handle = GetStdHandle(-11)

 00000044  6A F5			push -11
 00000046  E8 00000000 E		call _GetStdHandle@4
 0000004B  A3 00000C49 R		mov		handle, eax

					; WriteConsole(handle, &msg[0], 13, &written, 0)
 00000050  6A 00			push	0							; reserved argument, always needed
 00000052  68 00000C51 R		push	offset written				; stores number of bytes it wrote, pass a memory address to this
 00000057  52				push	edx							; the number of bytes youre asking it to write
 00000058  53				push	ebx							; address of where the message is
 00000059  FF 35 00000C49 R		push	handle						; handle of the output from GetStdHandle
 0000005F  E8 00000000 E		call	_WriteConsoleA@20			; call function
 00000064  5D				pop		ebp
 00000065  C2 0004			ret		4

 00000068			writeLine ENDP

 00000068			atoi PROC near
 00000068			_atoi:

 00000068  55				push	ebp
 00000069  8B EC			mov		ebp,	esp
 0000006B  8B 5D 0C			mov		ebx,	[ebp+12]
 0000006E  8B CB			mov		ecx,	ebx


 00000070			_endOfStringLoop:

 00000070  8A 03			mov		al,	[ebx]					; find contents of ebx
 00000072  83 C3 01			add		ebx, 1
 00000075  3C 0D			cmp		al,	0dh						; compare to see if al contains 0
 00000077  75 F7			jne		_endOfStringLoop			; jump if not equal to 0, end of loop
 00000079  83 EB 02			sub		ebx,	2					;subtract 1 from ebx/decrement as you go

 0000007C  8B FB			mov		edi, ebx
 0000007E  BE 00000001			mov		esi, 1
 00000083  B8 00000000			mov		eax, 0
 00000088  BB 00000000			mov		ebx, 0
 0000008D  BA 00000000			mov		edx, 0
 00000092  C7 05 00000C59 R		mov		accumulator, 0
	   00000000

 0000009C			_convertLoop:
 0000009C  8A 1F			mov		bl, [edi]															;exception thrown at 0x007710D5		;change to ebx
 0000009E  80 EB 30			sub		bl,	30h	
 000000A1  8B C3			mov		eax, ebx
 000000A3  F7 E6			mul		esi
 000000A5  8B 15 00000C59 R		mov     edx, accumulator
 000000AB  03 D0			add		edx, eax
 000000AD  89 15 00000C59 R		mov     accumulator, edx
 000000B3  B8 0000000A			mov		eax, 10
 000000B8  F7 E6			mul		esi 				;destination is eax
 000000BA  8B F0			mov		esi, eax
 000000BC  4F				dec     edi
 000000BD  3B F9			cmp     edi, ecx
 000000BF  7D DB			jge     _convertLoop

 000000C1  A1 00000C59 R		mov		eax, accumulator
 000000C6  8B 55 08			mov		edx, [ebp+8]
 000000C9  89 02			mov		[edx], eax
 000000CB  5D				pop		ebp
 000000CC  C2 0008			ret		8
					
 000000CF			atoi ENDP

 000000CF			itoa PROC near								; takes value from multiplication
					
 000000CF  55				push	ebp
 000000D0  8B EC			mov		ebp,	esp
					;takes 2 arguments, 1 where you want result to be put, 1 
 000000D2  8B 5D 08			mov		ebx,	[ebp+8]					;result in ascii
 000000D5  8B 45 0C			mov		eax,	[ebp+12]				;integer value that you will convert is stored here
 000000D8  81 C3 00000400		add		ebx,	1024

 000000DE  BF 0000000A			mov		edi, 10
 000000E3  83 EB 01			sub		ebx, 1
 000000E6  89 3B			mov		[ebx], edi
 000000E8  BF 0000000A			mov		edi,	10


 000000ED			_divisionLoop:
					
 000000ED  83 EB 01			sub		ebx,	1
 000000F0  BA 00000000			mov		edx,	0
 000000F5  F7 F7			div		edi				; remainder goes into edx, quotient goes into eax
 000000F7  80 C2 30			add		dl,		30h		; takes last digit
 000000FA  88 13			mov		[ebx],	dl
 000000FC  83 F8 00			cmp		eax,	0
 000000FF  7F EC			jg		_divisionLoop	

 00000101  5D				pop		ebp
 00000102  C2 0008			ret		8

 00000105			itoa ENDP

 00000105			main PROC near
 00000105			_main:

 00000105  68 00000008 R		push	offset prompt
 0000010A  E8 FFFFFF1F			call	writeLine

 0000010F  68 00000449 R		push	offset readBuffer1
 00000114  E8 FFFFFEE7			call	readLine
					;push	offset msg

 00000119  68 00000019 R		push	offset prompt2
 0000011E  E8 FFFFFF0B			call	writeLine

 00000123  68 00000849 R		push	offset	readBuffer2
 00000128  E8 FFFFFED3			call	readLine

 0000012D  B8 00000000 R		mov		eax, offset input1
 00000132  68 00000449 R		push	offset readBuffer1
 00000137  68 00000000 R		push	offset input1
 0000013C  E8 FFFFFF27			call	atoi

 00000141  B8 00000004 R		mov		eax, offset input2
 00000146  68 00000849 R		push	offset readBuffer2
 0000014B  68 00000004 R		push	offset input2
 00000150  E8 FFFFFF13			call	atoi

 00000155  A1 00000000 R		mov		eax,	input1
 0000015A  F7 25 00000004 R		mul		input2

 00000160  50				push	eax
 00000161  B8 00000049 R		mov		eax, offset writeBuffer
 00000166  68 00000049 R		push	offset writeBuffer
 0000016B  E8 FFFFFF5F			call	itoa

 00000170  68 0000002A R		push	offset result
 00000175  E8 FFFFFEB4			call	writeLine
					
 0000017A  68 00000049 R		push	offset writeBuffer
 0000017F  E8 FFFFFEAA			call	writeLine
 00000184  6A 00			push	0
 00000186  E8 00000000 E		call	_ExitProcess@4

 0000018B			main ENDP
				END
Microsoft (R) Macro Assembler Version 14.29.30136.0	    12/03/21 13:49:43
main.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	32 Bit	 00000C5D Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000018B Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

atoi . . . . . . . . . . . . . .	P Near	 00000068 _TEXT	Length= 00000067 Public
  _atoi  . . . . . . . . . . . .	L Near	 00000068 _TEXT	
  _endOfStringLoop . . . . . . .	L Near	 00000070 _TEXT	
  _convertLoop . . . . . . . . .	L Near	 0000009C _TEXT	
itoa . . . . . . . . . . . . . .	P Near	 000000CF _TEXT	Length= 00000036 Public
  _divisionLoop  . . . . . . . .	L Near	 000000ED _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000105 _TEXT	Length= 00000086 Public
  _main  . . . . . . . . . . . .	L Near	 00000105 _TEXT	
readLine . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000002E Public
writeLine  . . . . . . . . . . .	P Near	 0000002E _TEXT	Length= 0000003A Public
  _Loop  . . . . . . . . . . . .	L Near	 00000036 _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
_ExitProcess@4 . . . . . . . . .	L Near	 00000000 FLAT	External
_GetStdHandle@4  . . . . . . . .	L Near	 00000000 FLAT	External
_ReadConsoleA@20 . . . . . . . .	L Near	 00000000 FLAT	External
_WriteConsoleA@20  . . . . . . .	L Near	 00000000 FLAT	External
accumulator  . . . . . . . . . .	DWord	 00000C59 _DATA	
handle . . . . . . . . . . . . .	DWord	 00000C49 _DATA	
input1 . . . . . . . . . . . . .	DWord	 00000000 _DATA	
input2 . . . . . . . . . . . . .	DWord	 00000004 _DATA	
prompt2  . . . . . . . . . . . .	Byte	 00000019 _DATA	
prompt . . . . . . . . . . . . .	Byte	 00000008 _DATA	
readBuffer1  . . . . . . . . . .	Byte	 00000449 _DATA	
readBuffer2  . . . . . . . . . .	Byte	 00000849 _DATA	
readHandle . . . . . . . . . . .	DWord	 00000C55 _DATA	
read . . . . . . . . . . . . . .	DWord	 00000C4D _DATA	
result . . . . . . . . . . . . .	Byte	 0000002A _DATA	
writeBuffer  . . . . . . . . . .	Byte	 00000049 _DATA	
written  . . . . . . . . . . . .	DWord	 00000C51 _DATA	

	   0 Warnings
	   0 Errors
